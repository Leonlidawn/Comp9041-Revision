#!/usr/bin/perl -w
#========remarks======================
# $n = $arg =~ s/-//g; will result 1 or 0 since $arg =~ s/-//g is considered as a condition or something. 
# $arg =~ s/-//g ; $n = $arg; will be good.
#
#perl and shell is different, perl use eq for string comprsn whereas shell use > for strn comprsn.	
#
#open(F,"<$f")    , open a file, in this case. $f ,m remember to close F later.
#
#die dies with error message and throwss an exception to eval, error coded will be $! or $? if no exception caught. exit extis the process and error coded is set based on its argument.
#
# `` add \n to its output, chomp it off if desired.
#
# Escape Key is \e\n
#==================================




$n = 10;

foreach $arg (@ARGV) {
	if ($arg eq "--version") {
		print "$0: version 0.1\n";
	        exit(0);
	
	#if there is specified number of lines 
	}elsif ($arg =~ /-[0-9]+/){
		$arg =~ s/-//g;   
		$n =  $arg;
	#the current $arg is a file name
	}else {
		push @files, $arg;
   		
	 }
}

if (@files){ 
	
	foreach $f (@files) {
		
		open(F,"<$f") or die "$0: Can't open $f \n";
       		
		if (scalar @files > 1) {
			print "==> $f <==\n";
		}
		$numLines=`wc -l $f `;  
		chomp $numLines;
		#get rid of the \n generated by `` at the end of the result.
		$numLines =~ s/ .*//g; 
		$frontLines =  $numLines -  $n;
		$i = 0;
		while( $line = <F>){
			 $i++;
			if ( $i >  $frontLines){
				print  $line;	
			}
		}
		close(F);
	}

}else{

	
	$numLines = 0;
	# Escape Key 
	$esc = "\e\n";
	while($line = <STDIN>){
		if($line eq $esc ){
			last;
		}
		push @lines, $line; 
		$numLines++ ;
	}
	
	$frontLines =  $numLines -  $n;
	$i = 0;
	foreach $l (@lines){
		$i++;
		if ( $i >  $frontLines){
			print $l;	
		}
		
		 
	}

}
